{
  "version": 3,
  "sources": ["../../../../data/mods/gen7mixandmega/scripts.ts"],
  "sourcesContent": ["export const Scripts: ModdedBattleScriptsData = {\n\tinherit: 'gen7',\n\tinit() {\n\t\tfor (const id in this.data.Items) {\n\t\t\tif (!this.data.Items[id].megaStone) continue;\n\t\t\tthis.modData('Items', id).onTakeItem = false;\n\t\t}\n\t},\n\tactions: {\n\t\tcanMegaEvo(pokemon) {\n\t\t\tif (pokemon.species.isMega || pokemon.species.isPrimal) return null;\n\n\t\t\tconst item = pokemon.getItem();\n\t\t\tif (item.megaStone) {\n\t\t\t\tif (item.megaStone === pokemon.name) return null;\n\t\t\t\treturn item.megaStone;\n\t\t\t} else if (pokemon.baseMoves.includes('dragonascent' as ID)) {\n\t\t\t\treturn 'Rayquaza-Mega';\n\t\t\t} else {\n\t\t\t\treturn null;\n\t\t\t}\n\t\t},\n\t\trunMegaEvo(pokemon) {\n\t\t\tif (pokemon.species.isMega || pokemon.species.isPrimal) return false;\n\n\t\t\tconst isUltraBurst = !pokemon.canMegaEvo;\n\t\t\t// @ts-ignore\n\t\t\tconst species: Species = this.getMixedSpecies(pokemon.m.originalSpecies, pokemon.canMegaEvo || pokemon.canUltraBurst);\n\n\t\t\t// Do we have a proper sprite for it?\n\t\t\t// @ts-ignore assert non-null pokemon.canMegaEvo\n\t\t\tif (isUltraBurst || this.dex.species.get(pokemon.canMegaEvo).baseSpecies === pokemon.m.originalSpecies) {\n\t\t\t\tpokemon.formeChange(species, pokemon.getItem(), true);\n\t\t\t} else {\n\t\t\t\tconst oSpecies = this.dex.species.get(pokemon.m.originalSpecies);\n\t\t\t\t// @ts-ignore\n\t\t\t\tconst oMegaSpecies = this.dex.species.get(species.originalMega);\n\t\t\t\tpokemon.formeChange(species, pokemon.getItem(), true);\n\t\t\t\tthis.battle.add('-start', pokemon, oMegaSpecies.requiredItem || oMegaSpecies.requiredMove, '[silent]');\n\t\t\t\tif (oSpecies.types.length !== pokemon.species.types.length || oSpecies.types[1] !== pokemon.species.types[1]) {\n\t\t\t\t\tthis.battle.add('-start', pokemon, 'typechange', pokemon.species.types.join('/'), '[silent]');\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tpokemon.canMegaEvo = null;\n\t\t\tif (isUltraBurst) pokemon.canUltraBurst = null;\n\t\t\treturn true;\n\t\t},\n\t\tgetMixedSpecies(originalSpecies, megaSpecies) {\n\t\t\tconst oSpecies = this.dex.species.get(originalSpecies);\n\t\t\tconst mSpecies = this.dex.species.get(megaSpecies);\n\t\t\tif (oSpecies.baseSpecies === mSpecies.baseSpecies) return mSpecies;\n\t\t\t// @ts-ignore\n\t\t\tconst deltas = this.getMegaDeltas(mSpecies);\n\t\t\t// @ts-ignore\n\t\t\tconst species = this.doGetMixedSpecies(oSpecies, deltas);\n\t\t\treturn species;\n\t\t},\n\t\tgetMegaDeltas(megaSpecies) {\n\t\t\tconst baseSpecies = this.dex.species.get(megaSpecies.baseSpecies);\n\t\t\tconst deltas: {\n\t\t\t\tability: string,\n\t\t\t\tbaseStats: SparseStatsTable,\n\t\t\t\tweighthg: number,\n\t\t\t\toriginalMega: string,\n\t\t\t\trequiredItem: string | undefined,\n\t\t\t\ttype?: string,\n\t\t\t\tisMega?: boolean,\n\t\t\t\tisPrimal?: boolean,\n\t\t\t} = {\n\t\t\t\tability: megaSpecies.abilities['0'],\n\t\t\t\tbaseStats: {},\n\t\t\t\tweighthg: megaSpecies.weighthg - baseSpecies.weighthg,\n\t\t\t\toriginalMega: megaSpecies.name,\n\t\t\t\trequiredItem: megaSpecies.requiredItem,\n\t\t\t};\n\t\t\tlet stat: StatID;\n\t\t\tfor (stat in megaSpecies.baseStats) {\n\t\t\t\tdeltas.baseStats[stat] = megaSpecies.baseStats[stat] - baseSpecies.baseStats[stat];\n\t\t\t}\n\t\t\tif (megaSpecies.types.length > baseSpecies.types.length) {\n\t\t\t\tdeltas.type = megaSpecies.types[1];\n\t\t\t} else if (megaSpecies.types.length < baseSpecies.types.length) {\n\t\t\t\tdeltas.type = baseSpecies.types[0];\n\t\t\t} else if (megaSpecies.types[1] !== baseSpecies.types[1]) {\n\t\t\t\tdeltas.type = megaSpecies.types[1];\n\t\t\t}\n\t\t\tif (megaSpecies.isMega) deltas.isMega = true;\n\t\t\tif (megaSpecies.isPrimal) deltas.isPrimal = true;\n\t\t\treturn deltas;\n\t\t},\n\t\tdoGetMixedSpecies(speciesOrSpeciesName, deltas) {\n\t\t\tif (!deltas) throw new TypeError(\"Must specify deltas!\");\n\t\t\tconst species = this.dex.deepClone(this.dex.species.get(speciesOrSpeciesName));\n\t\t\tspecies.abilities = {'0': deltas.ability};\n\t\t\tif (species.types[0] === deltas.type) {\n\t\t\t\tspecies.types = [deltas.type];\n\t\t\t} else if (deltas.type) {\n\t\t\t\tspecies.types = [species.types[0], deltas.type];\n\t\t\t}\n\t\t\tconst baseStats = species.baseStats;\n\t\t\tfor (const statName in baseStats) {\n\t\t\t\tbaseStats[statName] = this.battle.clampIntRange(baseStats[statName] + deltas.baseStats[statName], 1, 255);\n\t\t\t}\n\t\t\tspecies.weighthg = Math.max(1, species.weighthg + deltas.weighthg);\n\t\t\tspecies.originalMega = deltas.originalMega;\n\t\t\tspecies.requiredItem = deltas.requiredItem;\n\t\t\tif (deltas.isMega) species.isMega = true;\n\t\t\tif (deltas.isPrimal) species.isPrimal = true;\n\t\t\treturn species;\n\t\t},\n\t},\n};\n"],
  "mappings": "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",
  "names": []
}
